{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chaos Hub - Collaborative Chaos Engineering \u00b6 The Chaos Hub enables your teams\u2019 effort on Chaos Engineering so they can work collaboratively on experiments executed via the Chaos Toolkit .","title":"Home"},{"location":"#chaos-hub-collaborative-chaos-engineering","text":"The Chaos Hub enables your teams\u2019 effort on Chaos Engineering so they can work collaboratively on experiments executed via the Chaos Toolkit .","title":"Chaos Hub - Collaborative Chaos Engineering"},{"location":"usage/configure/","text":"Configure the Chaos Hub \u00b6 General Settings \u00b6 The Chaos Hub has a limited number of settings, none of which are mandatory for a quick trial run. Configuration is passed through environment variables, either as part of the process environment, or via a .env file . Below is a list of variables that can be set: Name Default Comment SERVER_LISTEN_ADDR \u201c0.0.0.0\u201d Adress server will be listening on SERVER_LISTEN_PORT 8080 Port bound OAUTH_REDIRECT_BASE \u201c http://127.0.0.1:8080 \u201c URL OUAth providers redirect to. Should match the domain which you use to access the Chaos Hub CHERRYPY_PROXY_BASE \u201d\u201c Set it to the http(s):// when behind a reverse proxy DB_HOST \u201csqlite://\u201d Database provider host address DB_PORT Database provider port DB_NAME \u201cchaoshub\u201d Database name DB_USER \u201d\u201c Database user DB_PWD \u201d\u201c Database password SECRET_KEY \u201d\u201c Opaque string to sign session cookies. When this changes, all sessions are cleared CLAIM_SIGNER_KEY \u201d\u201c Opaque string to sign the JWT that is passed between the internal services USER_PROFILE_SECRET_KEY \u201d\u201c Opaque string to encrypt user\u2019s profile in the database. Using it goes towards GDPR. Losing that value means you won\u2019t be able to access any of the user\u2019s data. This cannot be recovered GITHUB_CLIENT_ID \u201d\u201c GitHub OAuth application client id GITHUB_CLIENT_SECRET \u201d\u201c GitHub OAuth application secret key GITLAB_CLIENT_ID \u201d\u201c GitLab OAuth application client id GITLAB_CLIENT_SECRET \u201d\u201c GitLab OAuth application secret key GOOGLE_CLIENT_ID \u201d\u201c Google OAuth application client id GOOGLE_CLIENT_SECRET \u201d\u201c Google OAuth application secret key BITBUCKET_CLIENT_ID \u201d\u201c BitBucket OAuth application client id BITBUCKET_CLIENT_SECRET \u201d\u201c BitBucket OAuth application secret key","title":"Configure"},{"location":"usage/configure/#configure-the-chaos-hub","text":"","title":"Configure the Chaos Hub"},{"location":"usage/configure/#general-settings","text":"The Chaos Hub has a limited number of settings, none of which are mandatory for a quick trial run. Configuration is passed through environment variables, either as part of the process environment, or via a .env file . Below is a list of variables that can be set: Name Default Comment SERVER_LISTEN_ADDR \u201c0.0.0.0\u201d Adress server will be listening on SERVER_LISTEN_PORT 8080 Port bound OAUTH_REDIRECT_BASE \u201c http://127.0.0.1:8080 \u201c URL OUAth providers redirect to. Should match the domain which you use to access the Chaos Hub CHERRYPY_PROXY_BASE \u201d\u201c Set it to the http(s):// when behind a reverse proxy DB_HOST \u201csqlite://\u201d Database provider host address DB_PORT Database provider port DB_NAME \u201cchaoshub\u201d Database name DB_USER \u201d\u201c Database user DB_PWD \u201d\u201c Database password SECRET_KEY \u201d\u201c Opaque string to sign session cookies. When this changes, all sessions are cleared CLAIM_SIGNER_KEY \u201d\u201c Opaque string to sign the JWT that is passed between the internal services USER_PROFILE_SECRET_KEY \u201d\u201c Opaque string to encrypt user\u2019s profile in the database. Using it goes towards GDPR. Losing that value means you won\u2019t be able to access any of the user\u2019s data. This cannot be recovered GITHUB_CLIENT_ID \u201d\u201c GitHub OAuth application client id GITHUB_CLIENT_SECRET \u201d\u201c GitHub OAuth application secret key GITLAB_CLIENT_ID \u201d\u201c GitLab OAuth application client id GITLAB_CLIENT_SECRET \u201d\u201c GitLab OAuth application secret key GOOGLE_CLIENT_ID \u201d\u201c Google OAuth application client id GOOGLE_CLIENT_SECRET \u201d\u201c Google OAuth application secret key BITBUCKET_CLIENT_ID \u201d\u201c BitBucket OAuth application client id BITBUCKET_CLIENT_SECRET \u201d\u201c BitBucket OAuth application secret key","title":"General Settings"},{"location":"usage/install/","text":"How to Install the Chaos Hub \u00b6 The Chaos Hub may be installed as a regular Python package or using a dedicated Docker image. The latter is better when you only want to run an instance with little fuss. Download the Docker Image \u00b6 Pull the Docker image : $ docker pull chaostoolkit/chaoshub:0.1.2 Next, read the running to learn how to run this image. Install as a Python Package \u00b6 Python Requirements \u00b6 The Chaos Hub is implemented in Python 3 and this requires a working Python installation to run. It officially supports Python 3.5+. It has only been tested against CPython . Install Python \u00b6 Install Python for your system: On MacOS X: $ brew install python3 On Debian/Ubuntu: $ sudo apt-get install python3 python3-venv On CentOS: $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm $ sudo yum -y install python35u Notice, on CentOS, the Python 3.5 binary is named python3.5 rather than python3 as other systems. On Windows: Download the latest binary installer from the Python website. Create a virtual environment \u00b6 Dependencies can be installed for your system via its package management but, more likely, you will want to install them yourself in a local virtual environment. $ python3 -m venv ~/.venvs/hub Make sure to always activate your virtual environment before using it: $ source ~/.venvs/hub/bin/activate Tip You may want to use virtualenvwrapper to make this process much nicer. Install the Chaos Hub \u00b6 Install chaoshub in the virtual environment as follows: (hub) $ pip install chaoshub Next, read the [running][localrun] to learn how to run it.","title":"Install"},{"location":"usage/install/#how-to-install-the-chaos-hub","text":"The Chaos Hub may be installed as a regular Python package or using a dedicated Docker image. The latter is better when you only want to run an instance with little fuss.","title":"How to Install the Chaos Hub"},{"location":"usage/install/#download-the-docker-image","text":"Pull the Docker image : $ docker pull chaostoolkit/chaoshub:0.1.2 Next, read the running to learn how to run this image.","title":"Download the Docker Image"},{"location":"usage/install/#install-as-a-python-package","text":"","title":"Install as a Python Package"},{"location":"usage/install/#python-requirements","text":"The Chaos Hub is implemented in Python 3 and this requires a working Python installation to run. It officially supports Python 3.5+. It has only been tested against CPython .","title":"Python Requirements"},{"location":"usage/install/#install-python","text":"Install Python for your system: On MacOS X: $ brew install python3 On Debian/Ubuntu: $ sudo apt-get install python3 python3-venv On CentOS: $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm $ sudo yum -y install python35u Notice, on CentOS, the Python 3.5 binary is named python3.5 rather than python3 as other systems. On Windows: Download the latest binary installer from the Python website.","title":"Install Python"},{"location":"usage/install/#create-a-virtual-environment","text":"Dependencies can be installed for your system via its package management but, more likely, you will want to install them yourself in a local virtual environment. $ python3 -m venv ~/.venvs/hub Make sure to always activate your virtual environment before using it: $ source ~/.venvs/hub/bin/activate Tip You may want to use virtualenvwrapper to make this process much nicer.","title":"Create a virtual environment"},{"location":"usage/install/#install-the-chaos-hub","text":"Install chaoshub in the virtual environment as follows: (hub) $ pip install chaoshub Next, read the [running][localrun] to learn how to run it.","title":"Install the Chaos Hub"},{"location":"usage/run/","text":"Run the Chaos Hub \u00b6 Info As of now, the Chaos Hub is at a stage where it is meant to run as a single instance on a node. Future work will be done to support other scenarios. Run via Docker \u00b6 Launch the Chaos Hub as follows: $ docker run -d -p 8080:8080 --name chaoshub -it chaostoolkit/chaoshub:0.1.2 The default settings mean you will run all-in-one container, including the database, which in this case is an in-memory instance of SQLite. This is not meant to be production ready bu tallows for a very fast trial of the Chaos Hub. Because it\u2019s all in the container (and in-memory anyway), all your data will be lost as soon as the container is terminated. You can stop the Chaos Hub as follows: $ docker stop chaoshub Finally, you can remove the container: $ docker rm chaoshub The Docker image uses the default settings to configure the instance. You can override them by creating a .env file and pass it to the docker run command, as follows: $ docker run -d -p 8080:8080 \\ -v `pwd`:/etc/chaoshub --name chaoshub -it chaostoolkit/chaoshub:0.1.2 This is assuming the local directory contains that .env file. Warning Environment variables are not overriden, so you need to pass all the variables in the new file. Run via Python locally \u00b6 If you have installed the Chaos Hub as a Python package, you should first activate the Python virtual environment you created for it, and start the Chaos Hub inside it: $ source ~/.venvs/hub/bin/activate (hub) $ chaoshub-dashboard run --env-path .env --create-tables This will be load the configuration from a local .env file and create tables which are needed at startup. To terminate the Chaos Hub, simply send the SIGINT signal to the process, such as by hitting Ctrl-C . Configuring the instance is done by writing a specific .env file.","title":"Run"},{"location":"usage/run/#run-the-chaos-hub","text":"Info As of now, the Chaos Hub is at a stage where it is meant to run as a single instance on a node. Future work will be done to support other scenarios.","title":"Run the Chaos Hub"},{"location":"usage/run/#run-via-docker","text":"Launch the Chaos Hub as follows: $ docker run -d -p 8080:8080 --name chaoshub -it chaostoolkit/chaoshub:0.1.2 The default settings mean you will run all-in-one container, including the database, which in this case is an in-memory instance of SQLite. This is not meant to be production ready bu tallows for a very fast trial of the Chaos Hub. Because it\u2019s all in the container (and in-memory anyway), all your data will be lost as soon as the container is terminated. You can stop the Chaos Hub as follows: $ docker stop chaoshub Finally, you can remove the container: $ docker rm chaoshub The Docker image uses the default settings to configure the instance. You can override them by creating a .env file and pass it to the docker run command, as follows: $ docker run -d -p 8080:8080 \\ -v `pwd`:/etc/chaoshub --name chaoshub -it chaostoolkit/chaoshub:0.1.2 This is assuming the local directory contains that .env file. Warning Environment variables are not overriden, so you need to pass all the variables in the new file.","title":"Run via Docker"},{"location":"usage/run/#run-via-python-locally","text":"If you have installed the Chaos Hub as a Python package, you should first activate the Python virtual environment you created for it, and start the Chaos Hub inside it: $ source ~/.venvs/hub/bin/activate (hub) $ chaoshub-dashboard run --env-path .env --create-tables This will be load the configuration from a local .env file and create tables which are needed at startup. To terminate the Chaos Hub, simply send the SIGINT signal to the process, such as by hitting Ctrl-C . Configuring the instance is done by writing a specific .env file.","title":"Run via Python locally"}]}